{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"textmarker.savedHighlights": [
			{
				"pattern": {
					"type": "string",
					"expression": "handleLookUpAccount = async (event) => {\r\n    event.preventDefault();\r\n    let url = \"/accountexists?userId=\" + this.accountEmailRef.current.value;\r\n    let res = await fetch(url, {method: 'GET'});\r\n    let body;\r\n    if (res.status != 200) {\r\n        alert(\"Sorry, there was a problem communicating with the server. Please try again.\");\r\n        this.accountEmailRef.current.focus();\r\n        return;\r\n    } \r\n    body = await res.json();\r\n    if (!body.result) {\r\n        alert(\"Sorry, there is no account associated with this email address.\");\r\n        this.accountEmailRef.current.select();\r\n        return;\r\n    } \r\n    //if here, account exists -- grab security question\r\n    url = \"/securityquestion?userId=\" + this.accountEmailRef.current.value;\r\n    res = await fetch(url, {method: 'GET'});\r\n    if (res.status != 200) {\r\n        alert(\"Sorry, there was a problem communicating with the server. Please try again.\");\r\n        this.accountEmailRef.current.focus();\r\n        return;\r\n    } \r\n    let question = await res.text();\r\n    this.setState({resetEmail: this.accountEmailRef.current.value, \r\n                   resetQuestion: question,\r\n                   showLookUpAccountDialog: false, \r\n                   showSecurityQuestionDialog: true});\r\n    this.emailInputRef.current.value = \"\"; //clear out field\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "handleSecurityQuestionResponse = async(event) => {\r\n    event.preventDefault();\r\n    let url = \"verifysecurityanswer/?userId=\" + this.state.resetEmail + \r\n      \"&answer=\" + this.securityAnswerRef.current.value;\r\n    let res = await fetch(url, {method: 'GET'});\r\n    if (res.status != 200) {\r\n        alert(\"There was a problem communicating with the server. Try again.\");\r\n        return;\r\n    } \r\n    let body = await res.json();\r\n    if (!body.result) {\r\n        alert(\"Sorry, that is not the correct answer to the security question.\");\r\n        this.securityAnswerRef.current.select();\r\n        return;\r\n    } \r\n    this.setState({resetAnswer: this.securityAnswerRef.current.value,\r\n                   showSecurityQuestionDialog: false, \r\n                   showPasswordResetDialog: true});\r\n     this.securityAnswerRef.current.value = \"\"; //clear out field\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "handleResetPassword = async(event) => {\r\n    event.preventDefault();\r\n    if (this.resetPasswordRef.current.value != this.resetPasswordRepeatRef.current.value) { \r\n        alert(\"Sorry, The passwords you entered do not match. Please try again.\");\r\n        this.resetPasswordRepeatRef.current.select();\r\n        return;\r\n    }\r\n    const resetInfo = {userId: this.state.resetEmail,\r\n                        answer: this.state.resetAnswer,\r\n                        newPassword: this.resetPasswordRef.current.value};\r\n    const res = await fetch('/resetpassword', {\r\n        headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(resetInfo)}); \r\n    const text = await res.text();\r\n    alert(text);   \r\n    this.resetPasswordRef.current.value = \"\";\r\n    this.resetPasswordRepeatRef.current.value = \"\";\r\n    this.setState({showPasswordResetDialog: false}); \r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			}
		]
	}
}